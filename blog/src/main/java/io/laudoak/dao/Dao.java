package io.laudoak.dao;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.ParameterizedType;
import java.util.List;

/**
 * generated by SQL2Q
 * on Thu Jan 05 19:26:03 CST 2017
 */
public class Dao<T>
{
    protected SqlSession sqlSession;

    protected static final String INSERT = "insert";
    protected static final String DELETE = "delete";
    protected static final String UPDATE = "update";
    protected static final String SELECT_ONE = "selectOne";
    protected static final String SELECT = "select";
    protected static final String COUNT = "count";

    protected String nameSpace;

    public Dao()
    {
        if (this.getClass().getGenericSuperclass() instanceof ParameterizedType)
        {
            this.nameSpace = ((Class) (((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0])).getSimpleName();
        } else
        {
            throw new RuntimeException("parameterized can not be null.");
        }
        initSqlSession();
    }

    private void initSqlSession()
    {
        try
        {
            InputStream is = Resources.getResourceAsStream("mybatis-config.xml");
            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
            this.sqlSession = sqlSessionFactory.openSession();
        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public Integer insert(T t)
    {
        return sqlSession.insert(sqlId(INSERT), t);
    }

    public Integer delete(T t)
    {
        return sqlSession.delete(sqlId(DELETE), t);
    }

    public Integer update(T t)
    {
        return sqlSession.update(sqlId(UPDATE), t);
    }

    public T selectOne(Long id)
    {
        return sqlSession.selectOne(sqlId(SELECT_ONE), id);
    }

    public List<T> select()
    {
        return sqlSession.selectList(sqlId(SELECT));
    }

    public Long count()
    {
        return sqlSession.selectOne(sqlId(COUNT));
    }


    protected String sqlId(String sqlId)
    {
        return this.nameSpace + "." + sqlId;
    }


}
